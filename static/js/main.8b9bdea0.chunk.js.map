{"version":3,"sources":["components/DailyGraph/DailyGraph.module.css","components/Cards/Cards.module.css","api/index.js","components/CountryPicker/CountryPicker.js","components/Cards/Cards.js","components/Chart/Chart.js","components/DailyGraph/DailyGraph.js","App.js","index.js","App.module.css","components/CountryPicker/CountryPicker.module.css","components/Chart/Chart.module.css","images/covid-19-logo.png"],"names":["module","exports","url","fetchData","a","axios","get","data","confirmed","recovered","deaths","lastUpdate","fetchDailyData","map","reportDate","total","date","fetchCountries","countries","name","fetchCountryData","country","CountryPicker","handleCountryChange","useState","fetchedCountries","setFetchedCountries","useEffect","fetchTheCountries","length","FormControl","className","styles","formControl","NativeSelect","defaultValue","onChange","e","target","value","i","key","Cards","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","variant","start","end","duration","separator","Date","toDateString","Chart","dailyData","setDailyData","fetchApi","lineChart","labels","toLocaleDateString","month","day","datasets","label","borderColor","fill","backgroundColor","options","scales","yAxes","ticks","callback","ranges","divider","suffix","n","toString","formatNumber","barChart","legend","title","DailyGraph","activeClass","setActiveClass","fetchedData","setFetchedData","console","log","cases_time_series","totalconfirmed","showSpecificTimeData","days","index","startDate","setDate","getDate","datesArray","filter","dailyconfirmed","buttonsDiv","btn","active","onClick","App","state","setState","this","image","src","coronaImage","Component","ReactDOM","render","document","getElementById"],"mappings":"wGACAA,EAAOC,QAAU,CAAC,UAAY,8BAA8B,IAAM,wBAAwB,WAAa,+BAA+B,OAAS,6B,mBCA/ID,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,wB,oOCC7JC,EAAM,kCAECC,EAAS,uCAAG,sCAAAC,EAAA,+EAGgDC,IAAMC,IAAIJ,GAH1D,2BAGVK,KAAOC,EAHG,EAGHA,UAAWC,EAHR,EAGQA,UAAWC,EAHnB,EAGmBA,OAAQC,EAH3B,EAG2BA,WAH3B,kBAKV,CAACH,YAAWC,YAAWC,SAAQC,eALrB,4FAAH,qDAYTC,EAAc,uCAAG,8BAAAR,EAAA,+EAGDC,IAAMC,IAAIJ,EAAI,SAHb,uBAGfK,EAHe,EAGfA,KAHe,kBAKfA,EAAKM,KAAK,gBAAEL,EAAF,EAAEA,UAAWE,EAAb,EAAaA,OAAQI,EAArB,EAAqBA,WAArB,MAAsC,CACnCN,UAAWA,EAAUO,MACrBL,OAAQA,EAAOK,MACfC,KAAMF,OARJ,yFAAH,qDAgBdG,EAAc,uCAAG,8BAAAb,EAAA,+EAEYC,IAAMC,IAAIJ,EAAI,aAF1B,uBAERgB,EAFQ,EAEfX,KAAOW,UAFQ,kBAGfA,EAAUL,KAAI,qBAAEM,SAHD,yFAAH,qDASdC,EAAgB,uCAAG,WAAOC,GAAP,yBAAAjB,EAAA,+EAEyCC,IAAMC,IAAIJ,EAAI,aAAamB,GAFpE,2BAEjBd,KAAOC,EAFU,EAEVA,UAAWC,EAFD,EAECA,UAAWC,EAFZ,EAEYA,OAAQC,EAFpB,EAEoBA,WAFpB,kBAGjB,CAACH,YAAWC,YAAWC,SAAQC,eAHd,4FAAH,sD,iBCZdW,EAvBO,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,oBAAyB,EAEGC,mBAAS,IAFZ,mBAEtCC,EAFsC,KAEpBC,EAFoB,KAW7C,OAPAC,qBAAU,YACiB,uCAAG,sBAAAvB,EAAA,kEACtBsB,EADsB,SACIT,IADJ,6EAAH,qDAGvBW,KACF,CAACF,IAGCD,EAAiBI,OAChB,kBAACC,EAAA,EAAD,CAAaC,UAAWC,IAAOC,aAC5B,kBAACC,EAAA,EAAD,CAAcC,aAAa,GAAGC,SAAU,SAACC,GAAD,OAAOd,EAAoBc,EAAEC,OAAOC,SACxE,4BAAQA,MAAM,IAAd,6BACCd,EAAiBZ,KAAI,SAACQ,EAASmB,GAAV,OAAe,4BAAQD,MAAOlB,EAASoB,IAAKD,GAAInB,QAG5E,M,kCC0BKqB,EA3CD,SAAC,GAAwD,IAAD,IAAtDnC,KAAOC,EAA+C,EAA/CA,UAAWC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,WAEjD,OAAIH,EAIA,yBAAKuB,UAAWC,IAAOW,WACnB,kBAACC,EAAA,EAAD,CAAMD,WAAS,EAACE,QAAS,EAAGC,QAAQ,UAChC,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGpB,UAAWqB,IAAGpB,IAAOqB,KAAMrB,IAAOsB,WACzE,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,iBAAlB,YACA,kBAACD,EAAA,EAAD,CAAYE,QAAQ,MAChB,kBAAC,IAAD,CAASC,MAAO,EAAGC,IAAKpD,EAAU+B,MAAOsB,SAAU,IAAKC,UAAU,OAEtE,kBAACN,EAAA,EAAD,CAAYC,MAAM,iBAAiB,IAAIM,KAAKpD,GAAYqD,gBACxD,kBAACR,EAAA,EAAD,CAAYE,QAAQ,SAApB,4CAGR,kBAACd,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGpB,UAAWqB,IAAGpB,IAAOqB,KAAMrB,IAAOvB,YACzE,kBAAC8C,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,iBAAlB,aACA,kBAACD,EAAA,EAAD,CAAYE,QAAQ,MAChB,kBAAC,IAAD,CAASC,MAAO,EAAGC,IAAKnD,EAAU8B,MAAOsB,SAAU,IAAKC,UAAU,OAEtE,kBAACN,EAAA,EAAD,CAAYC,MAAM,iBAAiB,IAAIM,KAAKpD,GAAYqD,gBACxD,kBAACR,EAAA,EAAD,CAAYE,QAAQ,SAApB,6CAGR,kBAACd,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGpB,UAAWqB,IAAGpB,IAAOqB,KAAMrB,IAAOtB,SACzE,kBAAC6C,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,iBAAlB,UACA,kBAACD,EAAA,EAAD,CAAYE,QAAQ,MAChB,kBAAC,IAAD,CAASC,MAAO,EAAGC,IAAKlD,EAAO6B,MAAOsB,SAAU,IAAKC,UAAU,OAEnE,kBAACN,EAAA,EAAD,CAAYC,MAAM,iBAAiB,IAAIM,KAAKpD,GAAYqD,gBACxD,kBAACR,EAAA,EAAD,CAAYE,QAAQ,SAApB,+CAhCT,M,yBCiFAO,EAtFD,SAAC,GAAqD,IAAD,IAAnD1D,KAAOC,EAA4C,EAA5CA,UAAWC,EAAiC,EAAjCA,UAAWC,EAAsB,EAAtBA,OAASW,EAAa,EAAbA,QAAa,EAE7BG,mBAAS,IAFoB,mBAExD0C,EAFwD,KAE7CC,EAF6C,KAI/DxC,qBAAU,YACQ,uCAAG,sBAAAvB,EAAA,kEACb+D,EADa,SACMvD,IADN,6EAAH,qDAGdwD,KACF,IAEF,IAAMC,EACFH,EAAUrC,OACT,kBAAC,IAAD,CACGtB,KAAM,CACF+D,OAAQJ,EAAUrD,KAAI,gBAAEG,EAAF,EAAEA,KAAF,OAAY,IAAI+C,KAAK/C,GAAMuD,mBAAmB,QAAQ,CAACC,MAAO,QAASC,IAAK,eAClGC,SAAU,CAAC,CACPnE,KAAM2D,EAAUrD,KAAI,qBAAEL,aACtBmE,MAAO,WACPC,YAAa,UACbC,MAAM,GACP,CACCtE,KAAM2D,EAAUrD,KAAI,qBAAEH,UACtBiE,MAAO,SACPC,YAAa,UACbE,gBAAiB,oBACjBD,MAAM,KAGdE,QAAS,CACLC,OAAQ,CACLC,MAAO,CAAC,CACLC,MAAO,CACJC,SAAU,SAAS5C,GAChB,IAAI6C,EAAS,CACV,CAAEC,QAAS,IAAKC,OAAQ,KACxB,CAAED,QAAS,IAAKC,OAAQ,MAU3B,OARA,SAAsBC,GACnB,IAAK,IAAI/C,EAAI,EAAGA,EAAI4C,EAAOvD,OAAQW,IAChC,GAAI+C,GAAKH,EAAO5C,GAAG6C,QAChB,OAAQE,EAAIH,EAAO5C,GAAG6C,SAASG,WAAaJ,EAAO5C,GAAG8C,OAG5D,OAAOC,EAEHE,CAAalD,WAQtC,KAGAmD,EACFlF,EACK,kBAAC,IAAD,CACGD,KAAM,CACF+D,OAAQ,CAAC,WAAY,YAAa,UAClCI,SAAU,CAAC,CACPC,MAAO,SACPG,gBAAiB,CAAC,gBACA,oBACA,qBAClBvE,KAAM,CAACC,EAAU+B,MAAO9B,EAAU8B,MAAO7B,EAAO6B,UAGxDwC,QAAS,CACLY,OAAQ,GACRC,MAAO,MAIb,KAGV,OACI,yBAAK7D,UAAWC,IAAOW,WAClBtB,EAAUqE,EAAWrB,I,iBCUnBwB,EA1FI,WAAM,IAAD,EAEkBrE,mBAAS,KAF3B,mBAEbsE,EAFa,KAEAC,EAFA,OAGkBvE,mBAAS,IAH3B,mBAGbwE,EAHa,KAGAC,EAHA,OAIczE,mBAAS,IAJvB,mBAIb0C,EAJa,KAIFC,EAJE,KAMpBxC,qBAAU,YACQ,uCAAG,4BAAAvB,EAAA,sEACOC,IAAMC,IAAI,0CADjB,OACPC,EADO,OAEb2F,QAAQC,IAAI5F,EAAKA,KAAK6F,mBACtBjC,EAAa5D,EAAKA,KAAK6F,mBACvBH,EAAe1F,EAAKA,KAAK6F,mBAJZ,2CAAH,qDAMdhC,KACF,IAEF,IAAMC,EACFH,EAAUrC,OACT,kBAAC,IAAD,CACGtB,KAAM,CACF+D,OAAQJ,EAAUrD,KAAI,gBAAEG,EAAF,EAAEA,KAAF,OAAW,IAAI+C,KAAK/C,GAAMuD,mBAAmB,QAAQ,CAACC,MAAO,QAASC,IAAK,eACjGC,SAAU,CAAC,CACPnE,KAAM2D,EAAUrD,KAAI,qBAAEwF,kBACtB1B,MAAO,WACPC,YAAa,UACbC,MAAM,KAGdE,QAAS,CACLC,OAAQ,CACLC,MAAO,CAAC,CACLC,MAAO,CACJC,SAAU,SAAS5C,GAChB,IAAI6C,EAAS,CACV,CAAEC,QAAS,IAAKC,OAAQ,MAU3B,OARA,SAAsBC,GACnB,IAAK,IAAI/C,EAAI,EAAGA,EAAI4C,EAAOvD,OAAQW,IAChC,GAAI+C,GAAKH,EAAO5C,GAAG6C,QAChB,OAAQE,EAAIH,EAAO5C,GAAG6C,SAASG,WAAaJ,EAAO5C,GAAG8C,OAG5D,OAAOC,EAEHE,CAAalD,WAOtC,KAIA+D,EAAuB,SAACC,EAAMC,GAChCT,EAAeS,GACf,IAAMC,EAAsB,IAATF,EAAe,IAAIxC,KAAK,IAAIA,MAAK,IAAIA,MAAO2C,SAAQ,IAAI3C,MAAO4C,UAAYJ,KAAShC,mBAAmB,QAAS,CAACC,MAAO,QAASC,IAAK,YAAe,KAClKmC,EAAaZ,EAAYa,QAAO,gBAAE7F,EAAF,EAAEA,KAAF,OAAW,IAAI+C,KAAK/C,GAAQ,IAAI+C,KAAK0C,GAAuB,SAClGtC,EAAayC,IAGXlB,EACFxB,EAAUrC,OACT,kBAAC,IAAD,CACGtB,KAAM,CACF+D,OAAQJ,EAAUrD,KAAI,gBAAEG,EAAF,EAAEA,KAAF,OAAW,IAAI+C,KAAK/C,GAAMuD,mBAAmB,QAAS,CAACC,MAAO,QAASC,IAAK,eAClGC,SAAS,CAAC,CACNC,MAAO,cACPG,gBAAiB,oBACjBvE,KAAK2D,EAAUrD,KAAI,qBAAEiG,uBAI/B,KAGN,OACI,yBAAK/E,UAAWC,IAAOW,WACd0B,EACAqB,EACD,yBAAK3D,UAAWC,IAAO+E,YACnB,4BAAQhF,UAAWqB,IAAGpB,IAAOgF,IAAqB,MAAhBlB,EAAsB9D,IAAOiF,OAAQ,IAAKC,QAAS,kBAAIZ,EAAqB,EAAG,OAAjH,aACA,4BAAQvE,UAAWqB,IAAGpB,IAAOgF,IAAsB,MAAhBlB,EAAsB9D,IAAOiF,OAAQ,IAAKC,QAAS,kBAAIZ,EAAqB,EAAG,OAAlH,aACA,4BAAQvE,UAAWqB,IAAGpB,IAAOgF,IAAsB,MAAhBlB,EAAsB9D,IAAOiF,OAAQ,IAAKC,QAAS,kBAAIZ,EAAqB,GAAI,OAAnH,gB,kCC1CLa,E,4MAnCXC,MAAQ,CACJ7G,KAAM,GACNc,QAAS,I,EAGbE,oB,uCAAsB,WAAOF,GAAP,eAAAjB,EAAA,yDAEdiB,EAFc,gCAGMlB,IAHN,OAGd6F,EAHc,6CAKM5E,EAAiBC,GALvB,OAKd2E,EALc,cAOlB,EAAKqB,SAAS,CACV9G,KAAMyF,EACN3E,QAASA,IATK,4C,wPAcClB,I,OAAbI,E,OACN+G,KAAKD,SAAS,CAAC9G,S,qIAGV,IAAD,EACoB+G,KAAKF,MAAtB7G,EADH,EACGA,KAAMc,EADT,EACSA,QACb,OAAO,yBAAKU,UAAWC,IAAOW,WACtB,yBAAKZ,UAAWC,IAAOuF,MAAOC,IAAKC,MACnC,kBAAC,EAAD,CAAOlH,KAAMA,IACb,kBAAC,EAAD,CAAegB,oBAAqB+F,KAAK/F,sBACzC,kBAAC,EAAD,CAAOhB,KAAMA,EAAMc,QAASA,IAC5B,kBAAC,EAAD,W,GAhCEqG,aCPlBC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,U,mBCJhD9H,EAAOC,QAAU,CAAC,UAAY,uBAAuB,MAAQ,qB,mBCA7DD,EAAOC,QAAU,CAAC,YAAc,qC,mBCAhCD,EAAOC,QAAU,CAAC,UAAY,2B,mBCD9BD,EAAOC,QAAU,IAA0B,2C","file":"static/js/main.8b9bdea0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"DailyGraph_container__3dbZc\",\"btn\":\"DailyGraph_btn__3KyFi\",\"buttonsDiv\":\"DailyGraph_buttonsDiv__3huP4\",\"active\":\"DailyGraph_active__ro-Iz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__27578\",\"card\":\"Cards_card__1l8dY\",\"infected\":\"Cards_infected__1uAlU\",\"recovered\":\"Cards_recovered__Atqfz\",\"deaths\":\"Cards_deaths__MNK8Y\"};","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api/';\r\n\r\nexport const fetchData = async () => {\r\n\r\n    try{\r\n        const {data: {confirmed, recovered, deaths, lastUpdate}} = await axios.get(url);\r\n\r\n        return {confirmed, recovered, deaths, lastUpdate};\r\n\r\n    } catch(error){\r\n\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n\r\n    try{\r\n        const {data} = await axios.get(url+'daily');\r\n\r\n        return data.map( ({confirmed, deaths, reportDate}) => ({\r\n                            confirmed: confirmed.total,\r\n                            deaths: deaths.total,\r\n                            date: reportDate\r\n                    }));\r\n\r\n    } catch(error){\r\n\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try{\r\n        const {data: {countries}} = await axios.get(url+'countries');\r\n        return countries.map(({name}) => name);\r\n    } catch(error){\r\n\r\n    }\r\n}\r\n\r\nexport const fetchCountryData = async (country) => {\r\n    try{\r\n        const {data: {confirmed, recovered, deaths, lastUpdate}} = await axios.get(url+'countries/'+country);\r\n        return {confirmed, recovered, deaths, lastUpdate};\r\n    } catch(error){\r\n\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { FormControl, NativeSelect, StylesProvider } from '@material-ui/core';\r\nimport {fetchCountries} from '../../api';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        const fetchTheCountries = async () =>{\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n        fetchTheCountries();\r\n    },[setFetchedCountries])\r\n\r\n    return(\r\n        fetchedCountries.length ?\r\n        (<FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Global (Select a Country)</option>\r\n                {fetchedCountries.map((country, i)=> <option value={country} key={i}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>)\r\n        : null\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React from 'react';\r\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\r\n\r\nimport styles from './Cards.module.css';\r\nimport CountryPicker from '../CountryPicker/CountryPicker';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nconst Cards = ({data: {confirmed, recovered, deaths, lastUpdate}}) => {\r\n\r\n    if(!confirmed){\r\n        return null;\r\n    }\r\n    return(\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\">Infected</Typography>\r\n                        <Typography variant=\"h6\">\r\n                            <CountUp start={0} end={confirmed.value} duration={1.5} separator=\",\"></CountUp>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of infected cases from COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\">Recovered</Typography>\r\n                        <Typography variant=\"h6\">\r\n                            <CountUp start={0} end={recovered.value} duration={1.5} separator=\",\"></CountUp>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of recovered cases from COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\">Deaths</Typography>\r\n                        <Typography variant=\"h6\">\r\n                            <CountUp start={0} end={deaths.value} duration={1.5} separator=\",\"></CountUp>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of deaths caused due to COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import React, {useState, useEffect} from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar} from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({data: {confirmed, recovered, deaths}, country}) => {\r\n\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        const fetchApi = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        fetchApi();\r\n    },[]);\r\n\r\n    const lineChart = (\r\n        dailyData.length ?\r\n        (<Line \r\n            data={{\r\n                labels: dailyData.map(({date}) => new Date(date).toLocaleDateString(\"en-US\",{month: 'short', day: 'numeric'})),\r\n                datasets: [{\r\n                    data: dailyData.map(({confirmed}) => confirmed),\r\n                    label: 'Infected',\r\n                    borderColor: '#3333ff',\r\n                    fill: true,\r\n                }, {\r\n                    data: dailyData.map(({deaths}) => deaths),\r\n                    label: 'Deaths',\r\n                    borderColor: '#ff0000',\r\n                    backgroundColor: 'rgba(255,0,0,0.5)',\r\n                    fill: true,\r\n                }]\r\n            }}\r\n            options={{\r\n                scales: {\r\n                   yAxes: [{\r\n                      ticks: {\r\n                         callback: function(value) {\r\n                            var ranges = [\r\n                               { divider: 1e6, suffix: 'M' },\r\n                               { divider: 1e3, suffix: 'k' }\r\n                            ];\r\n                            function formatNumber(n) {\r\n                               for (var i = 0; i < ranges.length; i++) {\r\n                                  if (n >= ranges[i].divider) {\r\n                                     return (n / ranges[i].divider).toString() + ranges[i].suffix;\r\n                                  }\r\n                               }\r\n                               return n;\r\n                            }\r\n                            return formatNumber(value);\r\n                         }\r\n                      }\r\n                   }]\r\n                }\r\n             }}\r\n            \r\n            />)\r\n        : null\r\n    )\r\n\r\n    const barChart = (\r\n        confirmed ?\r\n            (<Bar\r\n                data={{\r\n                    labels: ['Infected', 'Recovered', 'Deaths'],\r\n                    datasets: [{\r\n                        label: 'People',\r\n                        backgroundColor: ['rgba(0,0,255)',\r\n                                          'rgba(0,255,0,0.5)',\r\n                                          'rgba(255,0,0,0.5)'],\r\n                        data: [confirmed.value, recovered.value, deaths.value]\r\n                    }]\r\n                }}\r\n                options={{\r\n                    legend: {},\r\n                    title: {}\r\n                }}\r\n            />\r\n            )\r\n            : null\r\n    )\r\n\r\n    return(\r\n        <div className={styles.container}>\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import React, { useState, useEffect } from 'react';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\nimport cx from 'classnames';\r\n\r\nimport styles from './DailyGraph.module.css';\r\n\r\nconst DailyGraph = () =>{\r\n\r\n    const [activeClass, setActiveClass] = useState('0');\r\n    const [fetchedData, setFetchedData] = useState([]);\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchApi = async () => {\r\n            const data = (await axios.get('https://api.covid19india.org/data.json'))\r\n            console.log(data.data.cases_time_series);\r\n            setDailyData(data.data.cases_time_series);\r\n            setFetchedData(data.data.cases_time_series);\r\n        }\r\n        fetchApi();\r\n    },[])\r\n\r\n    const lineChart = (\r\n        dailyData.length ?\r\n        (<Line\r\n            data={{\r\n                labels: dailyData.map(({date})=> new Date(date).toLocaleDateString(\"en-Us\",{month: 'short', day: 'numeric'})),\r\n                datasets: [{\r\n                    data: dailyData.map(({totalconfirmed})=> totalconfirmed),\r\n                    label: 'Infected',\r\n                    borderColor: '#3333ff',\r\n                    fill: true,\r\n                }]\r\n            }}\r\n            options={{\r\n                scales: {\r\n                   yAxes: [{\r\n                      ticks: {\r\n                         callback: function(value) {\r\n                            var ranges = [\r\n                               { divider: 1e3, suffix: 'k' }\r\n                            ];\r\n                            function formatNumber(n) {\r\n                               for (var i = 0; i < ranges.length; i++) {\r\n                                  if (n >= ranges[i].divider) {\r\n                                     return (n / ranges[i].divider).toString() + ranges[i].suffix;\r\n                                  }\r\n                               }\r\n                               return n;\r\n                            }\r\n                            return formatNumber(value);\r\n                         }\r\n                      }\r\n                   }]\r\n                }\r\n             }}\r\n        />)\r\n        : null\r\n    )\r\n\r\n\r\n    const showSpecificTimeData = (days, index) => {\r\n        setActiveClass(index);\r\n        const startDate = (days !== 0) ? (new Date(new Date(new Date().setDate(new Date().getDate() - days ))).toLocaleDateString(\"en-US\", {month: 'short', day: 'numeric'})) : null\r\n        const datesArray = fetchedData.filter(({date})=> new Date(date) > new Date(startDate? startDate : null));\r\n        setDailyData(datesArray);\r\n    }\r\n\r\n    const barChart = (\r\n        dailyData.length ?\r\n        (<Bar \r\n            data={{\r\n                labels: dailyData.map(({date})=> new Date(date).toLocaleDateString(\"en-US\", {month: 'short', day: 'numeric'})),\r\n                datasets:[{\r\n                    label: 'Daily Cases',\r\n                    backgroundColor: 'rgba(255,0,0,0.7)',\r\n                    data:dailyData.map(({dailyconfirmed})=> dailyconfirmed),\r\n                }]\r\n            }}\r\n        />)\r\n        : null\r\n    );\r\n\r\n    return(\r\n        <div className={styles.container}>\r\n                {lineChart}\r\n                {barChart}\r\n                <div className={styles.buttonsDiv}>\r\n                    <button className={cx(styles.btn, activeClass === '0' ? styles.active: '')} onClick={()=>showSpecificTimeData(0, \"0\")}>Beginning</button>\r\n                    <button className={cx(styles.btn,  activeClass === '1' ? styles.active: '')} onClick={()=>showSpecificTimeData(7, \"1\")}>This Week</button>\r\n                    <button className={cx(styles.btn,  activeClass === '2' ? styles.active: '')} onClick={()=>showSpecificTimeData(30, \"2\")}>One Month</button>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DailyGraph;","import React, { Component } from 'react';\r\n\r\nimport Cards from './components/Cards/Cards';\r\nimport Chart from './components/Chart/Chart';\r\nimport CountryPicker from './components/CountryPicker/CountryPicker';\r\nimport DailyGraph from './components/DailyGraph/DailyGraph';\r\n\r\nimport styles from './App.module.css';\r\nimport coronaImage from './images/covid-19-logo.png';\r\n\r\nimport { fetchData, fetchCountryData} from './api/';\r\n\r\nclass App extends Component{\r\n\r\n    state = {\r\n        data: {},\r\n        country: ''\r\n    }\r\n\r\n    handleCountryChange = async (country) => {\r\n        let fetchedData;\r\n        if(!country){\r\n            fetchedData = await fetchData();\r\n        } else{\r\n            fetchedData = await fetchCountryData(country);\r\n        }\r\n        this.setState({\r\n            data: fetchedData,\r\n            country: country\r\n        });\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const data = await fetchData();\r\n        this.setState({data});\r\n    }\r\n\r\n    render(){\r\n        const {data, country} = this.state;\r\n        return(<div className={styles.container}>\r\n                <img className={styles.image} src={coronaImage} />\r\n                <Cards data={data}/>\r\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\r\n                <Chart data={data} country={country}/>\r\n                <DailyGraph />\r\n            </div>)\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2RhEu\",\"image\":\"App_image__3h0dH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__YmW-_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1kjAZ\"};","module.exports = __webpack_public_path__ + \"static/media/covid-19-logo.017560a0.png\";"],"sourceRoot":""}